package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;

import compiler.abstree.tree.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL ;
terminal String IDENTIFIER ;

terminal String BOOL, CHAR, INT ;
terminal String COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC ;
terminal String ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MEM, MUL, NEQ, NOT, OR, PTR, SUB, UADD, USUB, VAL ;
terminal String ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE, PRIVATE;

non terminal AbsProgram koda ;
non terminal AbsDecls dSkupaj, dKonstant, dpKonstant, dTipov, dpTipov, dSpremenljivk, dpSpremenljivk, dPodprogramov, oParametrov, opParametrovVar, opParametrovType ;
non terminal AbsProcDecl dProcedure ;
non terminal AbsFunDecl dFunkcije ;
non terminal AbsTypeExpr oTipa ;
non terminal AbsValExpr oVrednosti ;
non terminal AbsCallExpr kPodprograma ;
non terminal AbsValExprs koParametrov; 
non terminal AbsStmt stavek ;
non terminal AbsStmts stavki ;
non terminal AbsIfStmt ifStavek ;
non terminal AbsBlockStmt sStavek ;

precedence left OR ;
precedence left AND ;
precedence nonassoc EQU, NEQ, LTH, GTH, LEQ, GEQ ;
precedence left ADD, SUB ;
precedence left MUL, DIV ;
precedence nonassoc NOT ;
precedence nonassoc VAL ;
precedence nonassoc UADD, USUB, MEM ;
precedence nonassoc PTR ;
precedence left DOT, LBRACKET, RBRACKET ;

start with koda ;

koda ::=
	PROGRAM:b IDENTIFIER:name SEMIC dSkupaj:decls sStavek:stmt DOT:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);

		AbsProgram r = new AbsProgram(declName, decls, stmt);
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:} ;
	
dSkupaj ::=
	dKonstant:constDecls dTipov:typeDecls dSpremenljivk:varDecls dPodprogramov:funProcDecls
	{:
		AbsDecls r = new AbsDecls();
		r.decls.addAll(constDecls.decls);
		r.decls.addAll(typeDecls.decls);
		r.decls.addAll(varDecls.decls);
		r.decls.addAll(funProcDecls.decls);
		if(r.decls.size() != 0) {
			r.setBeg(r.decls.get(0));
			r.setEnd(r.decls.get(r.decls.size() - 1));
		}
		RESULT = r;
	:} ;

dKonstant ::=
	{:
		RESULT = new AbsDecls();
	:}
	|
	CONST:b dpKonstant:constDecls
	{:
		constDecls.setBeg(b, bleft, bright);
		RESULT = constDecls;
	:} ;
dpKonstant ::=
	dpKonstant:constDecls IDENTIFIER:name EQU oVrednosti:value SEMIC:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsConstDecl constDecl = new AbsConstDecl(declName, value);
		constDecl.setBeg(declName);
		constDecl.setEnd(e, eleft, eright);
		
		constDecls.decls.add(constDecl);
		constDecls.setEnd(constDecl);
		RESULT = constDecls;
	:}
	|
	IDENTIFIER:name EQU oVrednosti:value SEMIC:e
	{:
		AbsDecls constDecls = new AbsDecls();
		
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsConstDecl constDecl = new AbsConstDecl(declName, value);
		constDecl.setBeg(declName);
		constDecl.setEnd(e, eleft, eright);
		
		constDecls.decls.add(constDecl);
		constDecls.setBeg(constDecl);
		constDecls.setEnd(constDecl);
		RESULT = constDecls;
	:} ;
	
dTipov ::=
	{:
		RESULT = new AbsDecls();
	:}
	|
	TYPE:b dpTipov:typeDecls
	{:
		typeDecls.setBeg(b, bleft, bright);
		RESULT = typeDecls;
	:} ;
dpTipov ::=
	dpTipov:typeDecls IDENTIFIER:name EQU oTipa:type SEMIC:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsTypeDecl typeDecl = new AbsTypeDecl(declName, type);
		typeDecl.setBeg(declName);
		typeDecl.setEnd(e, eleft, eright);
		
		typeDecls.decls.add(typeDecl);
		typeDecls.setEnd(typeDecl);
		RESULT = typeDecls;
	:}
	|
	IDENTIFIER:name EQU oTipa:type SEMIC:e
	{:
		AbsDecls typeDecls = new AbsDecls();
		
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsTypeDecl typeDecl = new AbsTypeDecl(declName, type);
		typeDecl.setBeg(declName);
		typeDecl.setEnd(e, eleft, eright);
		
		typeDecls.decls.add(typeDecl);
		typeDecls.setBeg(typeDecl);
		typeDecls.setEnd(typeDecl);
		RESULT = typeDecls;
	:} ;

dSpremenljivk ::=
	{:
		RESULT = new AbsDecls();
	:}
	|
	VAR:b dpSpremenljivk:varDecls
	{:
		varDecls.setBeg(b, bleft, bright);
		RESULT = varDecls;
	:} ;
dpSpremenljivk ::=
	dpSpremenljivk:varDecls IDENTIFIER:name COLON oTipa:type SEMIC:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsVarDecl varDecl = new AbsVarDecl(declName, type);
		varDecl.setBeg(declName);
		varDecl.setEnd(e, eleft, eright);
		
		varDecls.decls.add(varDecl);
		varDecls.setEnd(varDecl);
		RESULT = varDecls;
	:}
	|
	IDENTIFIER:name COLON oTipa:type SEMIC:e
	{:
		AbsDecls varDecls = new AbsDecls();
		
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsVarDecl varDecl = new AbsVarDecl(declName, type);
		varDecl.setBeg(declName);
		varDecl.setEnd(e, eleft, eright);
		
		varDecls.decls.add(varDecl);
		varDecls.setBeg(varDecl);
		varDecls.setEnd(varDecl);
		RESULT = varDecls;
	:}
	|
	dpSpremenljivk:varDecls IDENTIFIER:name COLON PRIVATE oTipa:type SEMIC:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsVarDecl varDecl = new AbsVarDecl(declName, type, true);
		varDecl.setBeg(declName);
		varDecl.setEnd(e, eleft, eright);
		
		varDecls.decls.add(varDecl);
		varDecls.setEnd(varDecl);
		RESULT = varDecls;
	:}
	|
	IDENTIFIER:name COLON PRIVATE oTipa:type SEMIC:e
	{:
		AbsDecls varDecls = new AbsDecls();
		
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsVarDecl varDecl = new AbsVarDecl(declName, type, true);
		varDecl.setBeg(declName);
		varDecl.setEnd(e, eleft, eright);
		
		varDecls.decls.add(varDecl);
		varDecls.setBeg(varDecl);
		varDecls.setEnd(varDecl);
		RESULT = varDecls;
	:} ;
	
dPodprogramov ::=
	{:
		RESULT = new AbsDecls();
	:}
	|
	dProcedure:procDecl dPodprogramov:funProcDecls
	{:
		funProcDecls.setBeg(procDecl);
		if(funProcDecls.decls.size() == 1)
			funProcDecls.setEnd(procDecl);
		funProcDecls.decls.addFirst(procDecl);
		RESULT = funProcDecls;
	:}
	|
	dFunkcije:funDecl dPodprogramov:funProcDecls
	{:
		funProcDecls.setBeg(funDecl);
		if(funProcDecls.decls.size() == 1)
			funProcDecls.setEnd(funDecl);
		funProcDecls.decls.addFirst(funDecl);
		RESULT = funProcDecls;		
	:} ;

dProcedure ::=
	PROCEDURE:b IDENTIFIER:name oParametrov:pars SEMIC dSkupaj:decls sStavek:stmt SEMIC:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsProcDecl r = new AbsProcDecl(declName, pars, decls, stmt);
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:} ;

dFunkcije ::=
	FUNCTION:b IDENTIFIER:name oParametrov:pars COLON oTipa:type SEMIC dSkupaj:decls sStavek:stmt SEMIC:e
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsFunDecl r = new AbsFunDecl(declName, pars, type, decls, stmt);
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:} ;

oParametrov ::=
	LPARENTHESIS:b opParametrovVar:parsDecls RPARENTHESIS:e
	{:
		parsDecls.setBeg(b, bleft, bright);
		parsDecls.setEnd(e, eleft, eright);
		RESULT = parsDecls;
	:}
	|
	LPARENTHESIS:b RPARENTHESIS:e
	{:
		AbsDecls r = new AbsDecls();
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:} ;
opParametrovVar ::=
	IDENTIFIER:name COLON oTipa:type SEMIC opParametrovVar:parsDecls
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsVarDecl varDecl = new AbsVarDecl(declName, type);
		varDecl.setBeg(declName);
		varDecl.setEnd(type);
		
		parsDecls.decls.addFirst(varDecl);
		parsDecls.setBeg(varDecl);
		RESULT = parsDecls;
	:}
	|
	IDENTIFIER:name COLON oTipa:type
	{:
		AbsDecls parsDecls = new AbsDecls();
		
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsVarDecl varDecl = new AbsVarDecl(declName, type);
		varDecl.setBeg(declName);
		varDecl.setEnd(type);
		
		parsDecls.decls.add(varDecl);
		parsDecls.setBeg(varDecl);
		parsDecls.setEnd(varDecl);
		RESULT = parsDecls;
	:} ;

oTipa ::=
	BOOL:b
	{:
		AbsAtomType r = new AbsAtomType(AbsAtomType.BOOL);
		r.setBeg(b, bleft, bright);
		r.setEnd(b, bleft, bright);
		RESULT = r;
	:}
	|
	CHAR:b
	{:
		AbsAtomType r = new AbsAtomType(AbsAtomType.CHAR);
		r.setBeg(b, bleft, bright);
		r.setEnd(b, bleft, bright);
		RESULT = r;
	:}
	|
	INT:b
	{:
		AbsAtomType r = new AbsAtomType(AbsAtomType.INT);
		r.setBeg(b, bleft, bright);
		r.setEnd(b, bleft, bright);
		RESULT = r;
	:}
	|
	IDENTIFIER:name
	{:
		AbsTypeName r = new AbsTypeName(name);
		r.setBeg(name, nameleft, nameright); 
		r.setEnd(name, nameleft, nameright);
		RESULT = r;
	:}
	|
	ARRAY:b LBRACKET oVrednosti:loBound DOTS oVrednosti:hiBound RBRACKET OF oTipa:type
	{:
		AbsArrayType r = new AbsArrayType(type, loBound, hiBound);
		r.setBeg(b, bleft, bright);
		r.setEnd(type);
		RESULT = r;
	:}
	|
	RECORD:b opParametrovType:fields END:e
	{:
		AbsRecordType r = new AbsRecordType(fields);
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:}
	|
	PTR:b oTipa:type
	{:
		AbsPointerType r = new AbsPointerType(type);
		r.setBeg(b, bleft, bright);
		r.setEnd(type);
		RESULT = r;
	:}
	|
	LPARENTHESIS:b oTipa:type RPARENTHESIS:e
	{:
		type.setBeg(b, bleft, bright);
		type.setEnd(e, eleft, eright);
		RESULT = type;
	:} ;
opParametrovType ::=
	IDENTIFIER:name COLON oTipa:type SEMIC opParametrovType:parsDecls
	{:
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsTypeDecl typeDecl = new AbsTypeDecl(declName, type);
		typeDecl.setBeg(declName);
		typeDecl.setEnd(type);
		
		parsDecls.decls.addFirst(typeDecl);
		parsDecls.setBeg(typeDecl);
		RESULT = parsDecls;
	:}
	|
	IDENTIFIER:name COLON oTipa:type
	{:
		AbsDecls parsDecls = new AbsDecls();
		
		AbsDeclName declName = new AbsDeclName(name);
		declName.setBeg(name, nameleft, nameright);
		declName.setEnd(name, nameleft, nameright);
		
		AbsTypeDecl typeDecl = new AbsTypeDecl(declName, type);
		typeDecl.setBeg(declName);
		typeDecl.setEnd(type);
		
		parsDecls.decls.add(typeDecl);
		parsDecls.setBeg(typeDecl);
		parsDecls.setEnd(typeDecl);
		RESULT = parsDecls;
	:} ;

oVrednosti ::=
	BOOL_CONST:value
	{:
		AbsAtomConst r = new AbsAtomConst(value, AbsAtomConst.BOOL);
		r.setBeg(value, valueleft, valueright);
		r.setEnd(value, valueleft, valueright);
		RESULT = r;
	:}
	|
	CHAR_CONST:value
	{:
		AbsAtomConst r = new AbsAtomConst(value, AbsAtomConst.CHAR);
		r.setBeg(value, valueleft, valueright);
		r.setEnd(value, valueleft, valueright);
		RESULT = r;
	:}
	|
	INT_CONST:value
	{:
		AbsAtomConst r = new AbsAtomConst(value, AbsAtomConst.INT);
		r.setBeg(value, valueleft, valueright);
		r.setEnd(value, valueleft, valueright);
		RESULT = r;
	:}
	|
	NIL:b
	{:
		AbsNilConst r = new AbsNilConst();
		r.setBeg(b, bleft, bright);
		r.setEnd(b, bleft, bright);
		RESULT = r;
	:}
	|
	PTR:b oVrednosti:expr
	{:
		AbsUnExpr r = new AbsUnExpr(AbsUnExpr.MEM, expr);
		r.setBeg(b, bleft, bright);
		r.setEnd(expr);
		RESULT = r;
	:}	
	%prec MEM
	|
	ADD:b oVrednosti:expr
	{:
		AbsUnExpr r = new AbsUnExpr(AbsUnExpr.ADD, expr);
		r.setBeg(b, bleft, bright);
		r.setEnd(expr);
		RESULT = r;
	:}
	%prec UADD
	|
	SUB:b oVrednosti:expr
	{:
		AbsUnExpr r = new AbsUnExpr(AbsUnExpr.SUB, expr);
		r.setBeg(b, bleft, bright);
		r.setEnd(expr);
		RESULT = r;
	:}
	%prec USUB
	|
	NOT:b oVrednosti:expr
	{:
		AbsUnExpr r = new AbsUnExpr(AbsUnExpr.NOT, expr);
		r.setBeg(b, bleft, bright);
		r.setEnd(expr);
		RESULT = r;
	:}
	|
	oVrednosti:expr PTR:e
	{:
		AbsUnExpr r = new AbsUnExpr(AbsUnExpr.VAL, expr);
		r.setBeg(expr);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:}
	%prec VAL
	|
	oVrednosti:fstExpr MUL oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.MUL, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}	
	|
	oVrednosti:fstExpr DIV oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.DIV, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr ADD oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.ADD, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr SUB oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.SUB, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr EQU oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.EQU, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr NEQ oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.NEQ, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr LTH oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.LTH, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr GTH oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.GTH, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr LEQ oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.LEQ, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr GEQ oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.GEQ, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr AND oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.AND, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr OR oVrednosti:sndExpr
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.OR, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(sndExpr);
		RESULT = r;
	:}
	|
	IDENTIFIER:name
	{:
		AbsValName r = new AbsValName(name);
		r.setBeg(name, nameleft, nameright);
		r.setEnd(name, nameleft, nameright);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr LBRACKET oVrednosti:sndExpr RBRACKET:e
	{:
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.ARRACCESS, fstExpr, sndExpr);
		r.setBeg(fstExpr);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:}
	|
	oVrednosti:fstExpr DOT IDENTIFIER:name
	{:
		AbsValName valName = new AbsValName(name);
		valName.setBeg(name, nameleft, nameright);
		valName.setEnd(name, nameleft, nameright);
		
		AbsBinExpr r = new AbsBinExpr(AbsBinExpr.RECACCESS, fstExpr, valName);
		r.setBeg(fstExpr);
		r.setEnd(valName);
		RESULT = r;
	:}
	|
	kPodprograma:callExpr
	{:
		RESULT = callExpr;
	:}
	|
	LBRACKET:b oTipa:type RBRACKET:e
	{:
		AbsAlloc r = new AbsAlloc(type);
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:}
	|
	LPARENTHESIS:b oVrednosti:expr RPARENTHESIS:e
	{:
		expr.setBeg(b, bleft, bright);
		expr.setEnd(e, eleft, eright);
		RESULT = expr;
	:} ;
kPodprograma ::=
	IDENTIFIER:name LPARENTHESIS koParametrov:args RPARENTHESIS:e
	{:
		AbsValName valName = new AbsValName(name);
		valName.setBeg(name, nameleft, nameright);
		valName.setEnd(name, nameleft, nameright);
		
		AbsCallExpr r = new AbsCallExpr(valName, args);
		r.setBeg(valName);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:}
	|
	IDENTIFIER:name LPARENTHESIS RPARENTHESIS:e
	{:
		AbsValName valName = new AbsValName(name);
		valName.setBeg(name, nameleft, nameright);
		valName.setEnd(name, nameleft, nameright);
		
		AbsCallExpr r = new AbsCallExpr(valName, new AbsValExprs());
		r.setBeg(valName);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:} ;
koParametrov ::=
	oVrednosti:expr COMMA koParametrov:valExprs
	{:
		valExprs.exprs.addFirst(expr);
		valExprs.setEnd(expr);
		RESULT = valExprs;
	:}
	|
	oVrednosti:expr
	{:
		AbsValExprs r = new AbsValExprs();
		r.exprs.add(expr);
		r.setBeg(expr);
		r.setEnd(expr);
		RESULT = r;
	:} ;

stavek ::=
	oVrednosti:expr
	{:
		AbsExprStmt r = new AbsExprStmt(expr);
		r.setBeg(expr);
		r.setEnd(expr);
		RESULT = r;
	:}
	|
	oVrednosti:dstExpr ASSIGN oVrednosti:srcExpr
	{:
		AbsAssignStmt r = new AbsAssignStmt(dstExpr, srcExpr);
		r.setBeg(dstExpr);
		r.setEnd(srcExpr);
		RESULT = r;
	:}
	|
	ifStavek:ifStmt
	{:
		RESULT = ifStmt;
	:}
	|
	WHILE:b oVrednosti:cond DO stavek:stmt
	{:
		AbsWhileStmt r = new AbsWhileStmt(cond, stmt);
		r.setBeg(b, bleft, bright);
		r.setEnd(stmt);
		RESULT = r;
	:}
	|
	FOR:b IDENTIFIER:name ASSIGN oVrednosti:loBound TO oVrednosti:hiBound DO stavek:stmt
	{:
		AbsValName valName = new AbsValName(name);
		valName.setBeg(name, nameleft, nameright);
		valName.setEnd(name, nameleft, nameright);
		
		AbsForStmt r = new AbsForStmt(valName, loBound, hiBound, stmt);
		r.setBeg(b, bleft, bright);
		r.setEnd(stmt);
		RESULT = r;
	:}
	|
	sStavek:blockStmt
	{:
		RESULT = blockStmt;
	:} ;
ifStavek ::=
	IF:b oVrednosti:cond THEN stavek:thenStmt ELSE stavek:elseStmt
	{:
		AbsIfStmt r = new AbsIfStmt(cond, thenStmt, elseStmt);
		r.setBeg(b, bleft, bright);
		r.setEnd(elseStmt);
		RESULT = r;
	:}
	|
	IF:b oVrednosti:cond THEN stavek:thenStmt 
	{:
		AbsIfStmt r = new AbsIfStmt(cond, thenStmt, new AbsBlockStmt(new AbsStmts()));
		r.setBeg(b, bleft, bright);
		r.setEnd(thenStmt);
		RESULT = r;
	:} ;

sStavek ::=
	BEGIN:b END:e
	{:
		AbsBlockStmt r = new AbsBlockStmt(new AbsStmts());
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:}
	|
	BEGIN:b stavki:stmts END:e
	{:
		AbsBlockStmt r = new AbsBlockStmt(stmts);
		r.setBeg(b, bleft, bright);
		r.setEnd(e, eleft, eright);
		RESULT = r;
	:} ;
stavki ::=
	stavek:stmt SEMIC stavki:stmts
	{:
		stmts.stmts.addFirst(stmt);
		stmts.setBeg(stmt);
		RESULT = stmts;
	:}
	|
	stavek:stmt
	{:
		AbsStmts r = new AbsStmts();
		r.stmts.add(stmt);
		r.setBeg(stmt);
		r.setEnd(stmt);
		RESULT = r;
	:} ;
