package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;

import compiler.abstree.tree.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL ;
terminal String IDENTIFIER ;

terminal BOOL, CHAR, INT ;
terminal COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC ;
terminal ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MEM, MUL, NEQ, NOT, OR, PTR, SUB, UADD, USUB, VAL ;
terminal ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE ;

non terminal AbsProgram koda ;
non terminal dKonstant, dpKonstant, dTipov, dpTipov, dSpremenljivk, dpSpremenljivk, dPodprogramov, dProcedure, dFunkcije, oParametrov, opParametrov ;
non terminal AbsTypeExpr oTipa ;
non terminal AbsValExpr oVrednosti ;
non terminal kPodprograma, koParametrov ;
non terminal stavek, ifStavek, sStavek, stavki ;

precedence left OR ;
precedence left AND ;
precedence nonassoc EQU, NEQ, LTH, GTH, LEQ, GEQ ;
precedence left ADD, SUB ;
precedence left MUL, DIV ;
precedence nonassoc NOT ;
precedence nonassoc VAL ;
precedence nonassoc UADD, USUB, MEM ;
precedence left DOT, LBRACKET, RBRACKET ;

start with koda ;

koda ::=
	PROGRAM IDENTIFIER SEMIC dKonstant dTipov dSpremenljivk dPodprogramov sStavek DOT {: RESULT = new AbsProgram(); :};

dKonstant ::=
	|
	CONST dpKonstant ;
dpKonstant ::=
	dpKonstant IDENTIFIER EQU oVrednosti SEMIC |
	IDENTIFIER EQU oVrednosti SEMIC ;
	
dTipov ::=
	|
	TYPE dpTipov ;
dpTipov ::=
	dpTipov IDENTIFIER EQU oTipa SEMIC |
	IDENTIFIER EQU oTipa SEMIC ;

dSpremenljivk ::=
	|
	VAR dpSpremenljivk ;
dpSpremenljivk ::=
	dpSpremenljivk IDENTIFIER COLON oTipa SEMIC |
	IDENTIFIER COLON oTipa SEMIC ;
	
dPodprogramov ::=
	|
	dProcedure dPodprogramov |
	dFunkcije dPodprogramov ;

dProcedure ::=
	PROCEDURE IDENTIFIER oParametrov SEMIC dKonstant dTipov dSpremenljivk dPodprogramov sStavek SEMIC ;

dFunkcije ::=
	FUNCTION IDENTIFIER oParametrov COLON oTipa SEMIC dKonstant dTipov dSpremenljivk dPodprogramov sStavek SEMIC ;

oParametrov ::=
	LPARENTHESIS opParametrov RPARENTHESIS |
	LPARENTHESIS RPARENTHESIS ;
opParametrov ::=
	IDENTIFIER COLON oTipa SEMIC opParametrov |
	IDENTIFIER COLON oTipa ;

oTipa ::=
	BOOL {: RESULT = new AbsAtomType(AbsAtomType.BOOL); :} |
	CHAR {: RESULT = new AbsAtomType(AbsAtomType.CHAR); :} |
	INT {: RESULT = new AbsAtomType(AbsAtomType.INT); :} |
	IDENTIFIER |
	ARRAY LBRACKET oVrednosti:e1 DOTS oVrednosti:e2 RBRACKET OF oTipa:e3 {: RESULT = new AbsArrayType(e3, e1, e2); :} |
	RECORD opParametrov END |
	PTR oTipa:e1 {: RESULT = new AbsPointerType(e1); :} |
	LPARENTHESIS oTipa RPARENTHESIS ;

oVrednosti ::=
	BOOL_CONST:e1 {: RESULT = new AbsAtomConst(e1, AbsAtomConst.BOOL); :} |
	CHAR_CONST:e1 {: RESULT = new AbsAtomConst(e1, AbsAtomConst.CHAR); :} |
	INT_CONST:e1 {: RESULT = new AbsAtomConst(e1, AbsAtomConst.INT); :} |
	NIL {: RESULT = new AbsNilConst(); :} |
	PTR oVrednosti:e1 {: RESULT = new AbsUnExpr(AbsUnExpr.MEM, e1); :} %prec MEM |
	ADD oVrednosti:e1 {: RESULT = new AbsUnExpr(AbsUnExpr.ADD, e1); :} %prec UADD |
	SUB oVrednosti:e1 {: RESULT = new AbsUnExpr(AbsUnExpr.SUB, e1); :} %prec USUB |
	NOT oVrednosti:e1 {: RESULT = new AbsUnExpr(AbsUnExpr.NOT, e1); :} |
	oVrednosti:e1 PTR {: RESULT = new AbsUnExpr(AbsUnExpr.VAL, e1); :} %prec VAL |
	oVrednosti:e1 MUL oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.MUL, e1, e2); :} |
	oVrednosti:e1 DIV oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.DIV, e1, e2); :} |
	oVrednosti:e1 ADD oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.ADD, e1, e2); :} |
	oVrednosti:e1 SUB oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.SUB, e1, e2); :} |
	oVrednosti:e1 EQU oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.EQU, e1, e2); :} |
	oVrednosti:e1 NEQ oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.NEQ, e1, e2); :} |
	oVrednosti:e1 LTH oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.LTH, e1, e2); :} |
	oVrednosti:e1 GTH oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.GTH, e1, e2); :} |
	oVrednosti:e1 LEQ oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.LEQ, e1, e2); :} |
	oVrednosti:e1 GEQ oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.GEQ, e1, e2); :} |
	oVrednosti:e1 AND oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.AND, e1, e2); :} |
	oVrednosti:e1 OR oVrednosti:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.OR, e1, e2); :} |
	IDENTIFIER:e1 {: RESULT = new AbsValName(e1); :} |
	oVrednosti:e1 LBRACKET oVrednosti:e2 RBRACKET {: RESULT = new AbsBinExpr(AbsBinExpr.ARRACCESS, e1, e2); :} |
	oVrednosti:e1 DOT IDENTIFIER:e2 {: RESULT = new AbsBinExpr(AbsBinExpr.RECACCESS, e1, new AbsValName(e2)); :} |
	kPodprograma |
	LBRACKET oTipa:e1 RBRACKET {: RESULT = new AbsAlloc(e1); :} |
	LPARENTHESIS oVrednosti RPARENTHESIS ;
kPodprograma ::=
	IDENTIFIER LPARENTHESIS koParametrov RPARENTHESIS |
	IDENTIFIER LPARENTHESIS RPARENTHESIS ;
koParametrov ::=
	oVrednosti COMMA koParametrov |
	oVrednosti ;

stavek ::=
	oVrednosti |
	oVrednosti ASSIGN oVrednosti |
	ifStavek |
	WHILE oVrednosti DO stavek |
	FOR IDENTIFIER ASSIGN oVrednosti TO oVrednosti DO stavek |
	sStavek ;
ifStavek ::=
	IF oVrednosti THEN stavek ELSE stavek |
	IF oVrednosti THEN stavek ;

sStavek ::=
	BEGIN END |
	BEGIN stavki END ;
stavki ::=
	stavek SEMIC stavki |
	stavek ;
