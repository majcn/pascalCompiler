package compiler.synanal;

import java_cup.runtime.*;

import compiler.report.*;

parser code
{:
        public void syntax_error(Symbol cur_token) {
            Report.warning ("Syntax error near word '" + (String)(cur_token.value) + "'.", cur_token.left, cur_token.right);
        }
        
        public void report_error(String message, Object info) {
        }
        
        public void report_fatal_error(String message, Object info) throws Exception {
        	throw new Exception(message);
        }
:}

terminal String BOOL_CONST, CHAR_CONST, INT_CONST, NIL;
terminal String IDENTIFIER;

terminal BOOL, CHAR, INT;
terminal COLON, COMMA, DOT, DOTS, LBRACKET, LPARENTHESIS, RBRACKET, RPARENTHESIS, SEMIC;
terminal ADD, AND, DIV, EQU, GEQ, GTH, LEQ, LTH, MEM, MUL, NEQ, NOT, OR, PTR, SUB, UADD, USUB, VAL;
terminal ARRAY, ASSIGN, BEGIN, CONST, DO, ELSE, END, FOR, FUNCTION, IF, OF, PROCEDURE, PROGRAM, RECORD, THEN, TO, TYPE, VAR, WHILE;

non terminal source, header ;
non terminal dConst, consts, vConst, cParameters ;
non terminal dType, types, vType ;
non terminal dVar, vars ;
non terminal dPF, dProcedure, dFunction, parameters ;
non terminal procedureHeader, functionHeader ;
non terminal statements, statement, cStatement ;

precedence left OR ;
precedence left AND ;
precedence nonassoc EQU, NEQ, LTH, GTH, LEQ, GEQ ;
precedence left ADD, SUB ;
precedence left MUL, DIV ;
precedence nonassoc NOT ;
precedence nonassoc VAL ;
precedence nonassoc UADD, USUB, MEM ;
precedence left DOT, LBRACKET, RBRACKET ;

start with source;

source ::= header dConst dType dVar dPF ;
header ::= PROGRAM IDENTIFIER SEMIC ;

vType ::= 
	BOOL | 
	CHAR | 
	INT | 
	IDENTIFIER | 
	ARRAY LBRACKET vConst DOTS vConst RBRACKET OF vType |
	RECORD parameters END |
	PTR vType |
	LPARENTHESIS vType RPARENTHESIS ;

vConst ::= 
	BOOL_CONST |
	CHAR_CONST |
	INT_CONST |
	NIL |
	PTR vConst %prec MEM |
	ADD vConst %prec UADD |
	SUB vConst %prec USUB |
	NOT vConst |
	vConst PTR %prec VAL |
	vConst MUL vConst |
	vConst DIV vConst |
	vConst ADD vConst |
	vConst SUB vConst |
	vConst EQU vConst |
	vConst NEQ vConst |
	vConst LTH vConst |
	vConst GTH vConst |
	vConst LEQ vConst |
	vConst GEQ vConst |
	vConst AND vConst |
	vConst OR vConst |
	IDENTIFIER |
	vConst LBRACKET vConst RBRACKET |
	vConst DOT IDENTIFIER |
	IDENTIFIER LPARENTHESIS cParameters RPARENTHESIS |
	IDENTIFIER LPARENTHESIS RPARENTHESIS |
	LBRACKET vConst RBRACKET |
	LPARENTHESIS vConst RPARENTHESIS ;

cParameters ::= 
	vConst COMMA cParameters |
	vConst ;

dConst ::= 
	|
	CONST consts ;
consts ::= 
	consts IDENTIFIER EQU vConst SEMIC |
	IDENTIFIER EQU vConst SEMIC ;

dType ::= 
	|
	TYPE types ;
types ::= 
	types IDENTIFIER EQU vType SEMIC |
	IDENTIFIER EQU vType SEMIC ;

dVar ::=
	|
	VAR vars ;
vars ::=
	vars IDENTIFIER COLON vType SEMIC |
	IDENTIFIER COLON vType SEMIC ;

dPF ::=
	|
	dProcedure BEGIN statements END SEMIC |
	dFunction BEGIN statements END SEMIC ;

dProcedure ::=
	procedureHeader dConst dType dVar dPF cStatement SEMIC;
procedureHeader ::=
	PROCEDURE IDENTIFIER LPARENTHESIS parameters RPARENTHESIS SEMIC | 
	PROCEDURE IDENTIFIER LPARENTHESIS RPARENTHESIS SEMIC ;
	
dFunction ::=
	functionHeader dConst dType dVar dPF cStatement SEMIC;
functionHeader ::=
	FUNCTION IDENTIFIER LPARENTHESIS parameters RPARENTHESIS COLON vType SEMIC |
	FUNCTION IDENTIFIER LPARENTHESIS RPARENTHESIS COLON vType SEMIC ;
	
parameters ::= 
	IDENTIFIER COLON vType SEMIC parameters |
	IDENTIFIER COLON vType ;
	
cStatement ::=
	BEGIN END |
	BEGIN statements END;
statements ::= 
	statement SEMIC statements |
	statement ;
statement ::=
	vConst |
	vConst ASSIGN vConst |
	WHILE vConst DO statement |
	FOR IDENTIFIER ASSIGN vConst TO vConst DO statement |
	IF vConst THEN statement ELSE statement |
	IF vConst THEN statement ;